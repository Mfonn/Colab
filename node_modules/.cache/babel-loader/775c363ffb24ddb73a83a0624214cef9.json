{"ast":null,"code":"var _jsxFileName = \"/home/mfon/Documents/React/colab/eyecare/Colab/src/components/TimeChart.jsx\";\nimport React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TimeChart extends Component {\n  constructor(props) {\n    super(props);\n    this.updateSeries = this.updateSeries.bind(this);\n    this.state = {\n      series: [0],\n      options: {\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              margin: 0,\n              size: \"50%\",\n              background: \"#fff\",\n              image: undefined,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              position: \"front\",\n              dropShadow: {\n                enabled: true,\n                top: 3,\n                left: 0,\n                blur: 4,\n                opacity: 0.24\n              }\n            },\n            track: {\n              background: \"#fff\",\n              strokeWidth: \"50%\",\n              margin: 0,\n              dropShadow: {\n                enabled: true,\n                top: -3,\n                left: 0,\n                blur: 4,\n                opacity: 0.35\n              }\n            },\n            dataLabels: {\n              show: true,\n              name: {\n                offsetY: -10,\n                show: false,\n                color: \"#575555\",\n                fontSize: \"17px\"\n              },\n              value: {\n                formatter: function (val) {\n                  return Math.trunc(val / 100 * 24);\n                },\n                color: \"#343f56\",\n                fontSize: \"3rem\",\n                show: true\n              }\n            }\n          }\n        },\n        title: {\n          text: \"Hours spent online\",\n          align: \"center\",\n          margin: 10,\n          offsetY: 30,\n          style: {\n            fontSize: \"1.3rem\",\n            color: \"#343f56\",\n            fontWeight: 700\n          }\n        },\n        fill: {\n          type: \"gradient\",\n          colors: [\"#343f56\"] // gradient: {\n          //   shade: \"dark\",\n          //   type: \"horizontal\",\n          //   shadeIntensity: 0.5,\n          //   // gradientToColors: [\"rgba(255, 197, 6, 0.904)\"],\n          //   inverseColors: true,\n          //   opacityFrom: 1,\n          //   opacityTo: 1,\n          //   stops: [0, 100],\n          // },\n\n        },\n        stroke: {\n          lineCap: \"round\"\n        },\n        labels: [\"Hours Spent\"]\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.updateSeries();\n  }\n\n  updateSeries() {\n    // Create an array\n    const rate = 4.17;\n    const newSetOfRate = [];\n\n    for (let i = 0; i <= 24; i++) {\n      newSetOfRate.push(rate * i);\n    }\n\n    console.log(newSetOfRate); //Loop through the array at intervals\n\n    let hoursOnChart = 1000 * 60 * 60;\n\n    for (let i = 0; i < newSetOfRate.length; i++) {\n      setTimeout(() => {\n        this.setState({\n          series: [newSetOfRate[i]]\n        });\n        console.log(newSetOfRate[i]);\n      }, i * hoursOnChart);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"radialBar\",\n        height: \"300px\",\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/mfon/Documents/React/colab/eyecare/Colab/src/components/TimeChart.jsx"],"names":["React","Component","Chart","TimeChart","constructor","props","updateSeries","bind","state","series","options","plotOptions","radialBar","hollow","margin","size","background","image","undefined","imageOffsetX","imageOffsetY","position","dropShadow","enabled","top","left","blur","opacity","track","strokeWidth","dataLabels","show","name","offsetY","color","fontSize","value","formatter","val","Math","trunc","title","text","align","style","fontWeight","fill","type","colors","stroke","lineCap","labels","componentDidMount","rate","newSetOfRate","i","push","console","log","hoursOnChart","length","setTimeout","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nexport default class TimeChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateSeries = this.updateSeries.bind(this);\n    this.state = {\n      series: [0],\n      options: {\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              margin: 0,\n              size: \"50%\",\n              background: \"#fff\",\n              image: undefined,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              position: \"front\",\n              dropShadow: {\n                enabled: true,\n                top: 3,\n                left: 0,\n                blur: 4,\n                opacity: 0.24,\n              },\n            },\n            track: {\n              background: \"#fff\",\n              strokeWidth: \"50%\",\n              margin: 0,\n              dropShadow: {\n                enabled: true,\n                top: -3,\n                left: 0,\n                blur: 4,\n                opacity: 0.35,\n              },\n            },\n\n            dataLabels: {\n              show: true,\n              name: {\n                offsetY: -10,\n                show: false,\n                color: \"#575555\",\n                fontSize: \"17px\",\n              },\n              value: {\n                formatter: function (val) {\n                  return Math.trunc((val / 100) * 24);\n                },\n                color: \"#343f56\",\n                fontSize: \"3rem\",\n                show: true,\n              },\n            },\n          },\n        },\n        title: {\n          text: \"Hours spent online\",\n          align: \"center\",\n          margin: 10,\n          offsetY: 30,\n          style: {\n            fontSize: \"1.3rem\",\n            color: \"#343f56\",\n            fontWeight: 700,\n          },\n        },\n        fill: {\n          type: \"gradient\",\n          colors: [\"#343f56\"],\n          // gradient: {\n          //   shade: \"dark\",\n          //   type: \"horizontal\",\n          //   shadeIntensity: 0.5,\n          //   // gradientToColors: [\"rgba(255, 197, 6, 0.904)\"],\n          //   inverseColors: true,\n          //   opacityFrom: 1,\n          //   opacityTo: 1,\n          //   stops: [0, 100],\n          // },\n        },\n        stroke: {\n          lineCap: \"round\",\n        },\n        labels: [\"Hours Spent\"],\n      },\n    };\n  }\n  componentDidMount() {\n    this.updateSeries();\n  }\n  updateSeries() {\n    // Create an array\n    const rate = 4.17;\n    const newSetOfRate = [];\n    for (let i = 0; i <= 24; i++) {\n      newSetOfRate.push(rate * i);\n    }\n    console.log(newSetOfRate);\n\n    //Loop through the array at intervals\n    let hoursOnChart = 1000 * 60 * 60;\n    for (let i = 0; i < newSetOfRate.length; i++) {\n      setTimeout(() => {\n        this.setState({ series: [newSetOfRate[i]] });\n        console.log(newSetOfRate[i]);\n      }, i * hoursOnChart);\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Chart\n          options={this.state.options}\n          series={this.state.series}\n          type=\"radialBar\"\n          height=\"300px\"\n          width=\"100%\"\n        />\n        {/* <button onClick={this.updateSeries}>Update!</button> */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}